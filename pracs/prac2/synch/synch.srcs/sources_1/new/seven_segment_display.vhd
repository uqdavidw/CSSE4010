--generated by V2 synthesiser
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity seven_segment_display is 
Port (
	clk : in std_logic; --clock
	rst : in std_logic;
	cathode_p : out std_logic_vector(7 downto 0);
	digit1_p : in std_logic_vector(3 downto 0);
	anode_p : out std_logic_vector(7 downto 0);
	digit2_p : in std_logic_vector(3 downto 0);
	digit3_p : in std_logic_vector(3 downto 0);
	digit4_p : in std_logic_vector(3 downto 0)
); 
end seven_segment_display;

------------------------------------------------

architecture behavioural of ssegDriver is

	signal digit_reg : std_logic_vector(15 downto 0);
	signal anode_reg : std_logic_vector(3 downto 0);
	signal digitout_reg : std_logic_vector(3 downto 0);
	signal digit_sel : std_logic_vector(1 downto 0);
	signal next_sel : std_logic_vector(1 downto 0);
	
	begin
		
		--Clock and set state machine
		process (clk, rst) 
			begin
				if (rst = '1') then
					digit_reg <= "0000000000000000";
					digit_sel <= "00";
					next_sel <= "00";
					digitout_reg <= "0000";
					anode_reg <= "1111";

				elsif (clk'event and clk = '1') then
					
					--latch digits into register on clock edge
					digit_reg(3 downto 0) <= digit1_p;
					digit_reg(7 downto 4) <= digit2_p;
					digit_reg(11 downto 8) <= digit3_p;
					digit_reg(15 downto 12) <= digit4_p;
					
					
					digit_sel <= next_sel;
			
					case digit_sel is
					
						when "00" =>
							anode_reg <= "1110";	
							digitout_reg <= digit_reg(3 downto 0);
							next_sel <= "01";
							
						when "01" =>
							anode_reg <= "1101";	
							digitout_reg <= digit_reg(7 downto 4);
							digit_sel <= "10";
							
						when "10" =>
							anode_reg <= "1011";	
							digitout_reg <= digit_reg(11 downto 8);
							next_sel <= "11";
							
						when "11" =>
							anode_reg <= "0111";	
							digitout_reg <= digit_reg(15 downto 12);
							next_sel <= "00";
							
						when others =>
							anode_reg <= "11111111";	
							digitout_reg <= "0000";
							next_sel <= "000";

						
					end case;
				end if;
			end process;
				
			--Connect the Cathode values
			with digitout_reg select
			cathode_p <= "11000000"when "0000", 	-- 0 
							"11111001" when "0001",	-- 1
							"10100100" when "0010",		-- 2
							"10110000" when "0011",		-- 3
							"10011001" when "0100",		-- 4
							"10010010" when "0101",		-- 5
							"10000010" when "0110",		-- 6
							"11111000" when "0111",		-- 7
							"10000000" when "1000",		-- 8
							"10011000" when "1001",		-- 9
							"10001000" when "1010",		-- A
							"10000011" when "1011",		-- B
							"11000110" when "1100",		-- C
							"10100001" when "1101",		-- D
							"10000110" when "1110",		-- E
							"10001110" when "1111";		-- F
		 
		 --Connect the Anode values
		 anode_p <= anode_reg;

end behavioural;